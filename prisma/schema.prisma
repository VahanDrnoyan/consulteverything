// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator nexusPrisma {
  provider = "nexus-prisma"
  output   = "../generated/nexus-prisma"
}

/// this is acccount
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// this is Session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// this is User
model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  role           Role           @default(USER)
  accounts       Account[]
  sessions       Session[]
  consultancies  Consultancy[]
  availability   Availability[]
  requestsUser   Request[]      @relation("RequestUser")
  consultantUser Request?       @relation("ConsultantUser")
}

/// Lorem ipsum dolor sit amet.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  MODERATOR
  ADMIN
  SUPERADMIN
}

/// enum Field
enum Field {
  INCLUDE
  EXCLUDE
  REQUIRED
}

/// enum Gender
enum Gender {
  MAIL
  FEMAIL
  OTHER
}

// /Consultancy

model Consultancy {
  id                                          Int       @id @default(autoincrement())
  title                                       String
  short_description                           String
  long_description                            String?   @db.Text
  max_time_minuets                            Int       @default(20)
  max_attachment_count                        Int       @default(3)
  enable_video_by_provider                    Boolean   @default(true)
  allow_enable_video_by_requester             Boolean   @default(true)
  allow_name_surname                          Field     @default(INCLUDE)
  allow_profession_check                      Field     @default(INCLUDE)
  allow_age_check                             Field     @default(INCLUDE)
  allow_gender_check                          Field     @default(INCLUDE)
  allow_previous_consultancy_experience_check Field     @default(INCLUDE)
  allow_email_check                           Field     @default(INCLUDE)
  allow_ongoing_support_check                 Field     @default(INCLUDE)
  allow_expectations_check                    Field     @default(INCLUDE)
  allow_time_spent_issue_resolution_check     Field     @default(INCLUDE)
  allow_expertise_in_problem_field_check      Field     @default(INCLUDE)
  created_at                                  DateTime  @default(now())
  isActive                                    Boolean   @default(true)
  userId                                      String
  tags                                        Tag[]
  User                                        User      @relation(fields: [userId], references: [id])
  last_requested_at                           DateTime  @default(now())
  requests                                    Request[]
}

// Availability
model Availability {
  id          String  @id @default(cuid())
  userId      String
  User        User    @relation(fields: [userId], references: [id])
  start       String
  end         String
  is_reserved Boolean @default(true)
}

/// Tag
model Tag {
  id            Int         @id @default(autoincrement())
  name          String
  consultancy   Consultancy @relation(fields: [consultancyId], references: [id], onDelete: Cascade)
  consultancyId Int
}

// Request

model Request {
  id               String @id @default(cuid())
  requestUserId    String
  requestUser      User   @relation("RequestUser", fields: [requestUserId], references: [id])
  consultantUserId String @unique
  consultantUser   User   @relation("ConsultantUser", fields: [consultantUserId], references: [id])

  consultancy   Consultancy @relation(fields: [consultancyId], references: [id], onDelete: Cascade)
  consultancyId Int

  created_at             DateTime @default(now())
  isCompleted            Boolean  @default(true)
  isCanceled             Boolean  @default(true)
  chatId                 String
  chat                   Chat     @relation(fields: [chatId], references: [id])
  name_surname           String?
  age                    Int?
  email                  String?
  expertise              String?
  profession             String?
  time_spent_on_issue    String?
  expectations           String?  @db.Text
  prevoiuos_experience   String?  @db.Text
  allow_live_video       Boolean?
  ongoing_support_needed Boolean?
  gender                 Gender?
  start                  String
  end                    String
}

//Chat
model Chat {
  id      String    @id @default(cuid())
  request Request[]
}
