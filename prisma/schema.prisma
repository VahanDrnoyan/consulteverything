// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator nexusPrisma {
  provider = "nexus-prisma"
  output   = "../generated/nexus-prisma"
}

/// this is acccount
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

/// this is Session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// this is User
model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(USER)
  accounts      Account[]
  sessions      Session[]
  consultancies Consultancy[]
}

/// Lorem ipsum dolor sit amet.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  MODERATOR
  ADMIN
  SUPERADMIN
}
/// enum Field
enum Field {
  INCLUDE
  EXCLUDE
  REQUIRED
}
// /Consultancy

model Consultancy {
  id                                         String  @id @default(cuid())
  title                                      String
  short_description                          String
  long_description                            String? @db.Text
  max_time_minuets                           Int     @default(20)
  max_attachment_count                       Int     @default(3)
  enable_video_by_provider                   Boolean @default(true)
  allow_enable_video_by_requester            Boolean @default(true)
  allow_name_surneame                        Field   @default(INCLUDE)
  allow_prefession_check                     Field   @default(INCLUDE)
  allow_age_check                            Field   @default(INCLUDE)
  allow_gender_check                         Field   @default(INCLUDE)
  allow_previous_consulancy_experience_check Field   @default(INCLUDE)
  allow_email_check                          Field   @default(INCLUDE)
  allow_ongoing_support_check                Field   @default(INCLUDE)
  allow_expectations_check                   Field   @default(INCLUDE)
  allow_time_spent_issue_resolution_check    Field   @default(INCLUDE)
  allow_expertise_in_problem_field_check     Field   @default(INCLUDE)
  userId                                     String
  tags     Tag[]
  User User @relation(fields: [userId], references: [id])
}
/// Tag
model Tag {
  id                                         Int  @id @default(autoincrement())
  name                                      String
  consultant   Consultancy @relation(fields: [consultantId], references: [id])
  consultantId String
}

