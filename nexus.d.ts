/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { MainContext } from "./lib/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    Time<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Time";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    Time<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Time";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AvailabilityDataType: { // input type
    end: string; // String!
    is_reserved: boolean; // Boolean!
    start: string; // String!
  }
  ConsultancyDataType: { // input type
    allow_age_check: NexusGenEnums['Field']; // Field!
    allow_email_check: NexusGenEnums['Field']; // Field!
    allow_enable_video_by_requester: boolean; // Boolean!
    allow_expectations_check: NexusGenEnums['Field']; // Field!
    allow_expertise_in_problem_field_check: NexusGenEnums['Field']; // Field!
    allow_gender_check: NexusGenEnums['Field']; // Field!
    allow_name_surname: NexusGenEnums['Field']; // Field!
    allow_ongoing_support_check: NexusGenEnums['Field']; // Field!
    allow_previous_consultancy_experience_check: NexusGenEnums['Field']; // Field!
    allow_profession_check: NexusGenEnums['Field']; // Field!
    allow_time_spent_issue_resolution_check: NexusGenEnums['Field']; // Field!
    created_at?: NexusGenScalars['Time'] | null; // Time
    enable_video_by_provider: boolean; // Boolean!
    isActive: boolean; // Boolean!
    long_description?: string | null; // String
    max_attachment_count: number; // Int!
    max_time_minuets: number; // Int!
    short_description: string; // String!
    tags: NexusGenInputs['TagInputType'][]; // [TagInputType!]!
    title: string; // String!
  }
  ConsultancyPaginationInput: { // input type
    cursor?: number | null; // Int
    limit: number; // Int!
  }
  RequestDataType: { // input type
    age?: number | null; // Int
    allow_live_video?: boolean | null; // Boolean
    email?: string | null; // String
    end: string; // String!
    expectations?: string | null; // String
    expertise?: string | null; // String
    gender?: NexusGenEnums['Gender'] | null; // Gender
    isCanceled: boolean; // Boolean!
    isCompleted: boolean; // Boolean!
    name_surname?: string | null; // String
    ongoing_support_needed?: boolean | null; // Boolean
    prevoiuos_experience?: string | null; // String
    profession?: string | null; // String
    start: string; // String!
    time_spent_on_issue?: string | null; // String
  }
  TagInputType: { // input type
    id: number; // Int!
    name: string; // String!
  }
}

export interface NexusGenEnums {
  Field: "EXCLUDE" | "INCLUDE" | "REQUIRED"
  Gender: "FEMAIL" | "MAIL" | "OTHER"
  Role: "ADMIN" | "MODERATOR" | "SUPERADMIN" | "USER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Time: any
}

export interface NexusGenObjects {
  Account: { // root type
    id: string; // ID!
    session_state?: string | null; // String
  }
  Availability: { // root type
    end: string; // String!
    id: string; // ID!
    is_reserved: boolean; // Boolean!
    start: string; // String!
  }
  Consultancy: { // root type
    allow_age_check: NexusGenEnums['Field']; // Field!
    allow_email_check: NexusGenEnums['Field']; // Field!
    allow_enable_video_by_requester: boolean; // Boolean!
    allow_expectations_check: NexusGenEnums['Field']; // Field!
    allow_expertise_in_problem_field_check: NexusGenEnums['Field']; // Field!
    allow_gender_check: NexusGenEnums['Field']; // Field!
    allow_name_surname: NexusGenEnums['Field']; // Field!
    allow_ongoing_support_check: NexusGenEnums['Field']; // Field!
    allow_previous_consultancy_experience_check: NexusGenEnums['Field']; // Field!
    allow_profession_check: NexusGenEnums['Field']; // Field!
    allow_time_spent_issue_resolution_check: NexusGenEnums['Field']; // Field!
    created_at?: NexusGenScalars['Time'] | null; // Time
    enable_video_by_provider: boolean; // Boolean!
    id: number; // Int!
    isActive: boolean; // Boolean!
    last_requested_at?: NexusGenScalars['Time'] | null; // Time
    long_description?: string | null; // String
    max_attachment_count: number; // Int!
    max_time_minuets: number; // Int!
    short_description: string; // String!
    title: string; // String!
  }
  ConsultancyById: { // root type
    data: NexusGenRootTypes['Consultancy']; // Consultancy!
    id: number; // Int!
  }
  ConsultancyConnection: { // root type
    edges?: Array<NexusGenRootTypes['ConsultancyEdge'] | null> | null; // [ConsultancyEdge]
    pageInfo?: NexusGenRootTypes['PageInfo'] | null; // PageInfo
  }
  ConsultancyEdge: { // root type
    cursor?: number | null; // Int
    node?: NexusGenRootTypes['Consultancy'] | null; // Consultancy
  }
  Event: { // root type
    id: string; // ID!
  }
  Mutation: {};
  PageInfo: { // root type
    endCursor?: number | null; // Int
    hasNextPage?: number | null; // Int
  }
  Query: {};
  Request: { // root type
    age?: number | null; // Int
    allow_live_video?: boolean | null; // Boolean
    created_at?: NexusGenScalars['Time'] | null; // Time
    email?: string | null; // String
    expectations?: string | null; // String
    expertise?: string | null; // String
    gender?: NexusGenEnums['Gender'] | null; // Gender
    id: string; // ID!
    isCanceled: boolean; // Boolean!
    isCompleted: boolean; // Boolean!
    name_surname?: string | null; // String
    ongoing_support_needed?: boolean | null; // Boolean
    prevoiuos_experience?: string | null; // String
    profession?: string | null; // String
    scheduled_at?: NexusGenScalars['Time'] | null; // Time
    time_spent_on_issue?: string | null; // String
  }
  Tag: { // root type
    id: number; // Int!
    name: string; // String!
  }
  TotalConsultanciesObject: { // root type
    total?: number | null; // Int
  }
  User: { // root type
    email?: string | null; // String
    id: string; // ID!
    name?: string | null; // String
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Account: { // field return type
    id: string; // ID!
    session_state: string | null; // String
    user: NexusGenRootTypes['User']; // User!
  }
  Availability: { // field return type
    User: NexusGenRootTypes['User']; // User!
    end: string; // String!
    id: string; // ID!
    is_reserved: boolean; // Boolean!
    start: string; // String!
  }
  Consultancy: { // field return type
    User: NexusGenRootTypes['User']; // User!
    allow_age_check: NexusGenEnums['Field']; // Field!
    allow_email_check: NexusGenEnums['Field']; // Field!
    allow_enable_video_by_requester: boolean; // Boolean!
    allow_expectations_check: NexusGenEnums['Field']; // Field!
    allow_expertise_in_problem_field_check: NexusGenEnums['Field']; // Field!
    allow_gender_check: NexusGenEnums['Field']; // Field!
    allow_name_surname: NexusGenEnums['Field']; // Field!
    allow_ongoing_support_check: NexusGenEnums['Field']; // Field!
    allow_previous_consultancy_experience_check: NexusGenEnums['Field']; // Field!
    allow_profession_check: NexusGenEnums['Field']; // Field!
    allow_time_spent_issue_resolution_check: NexusGenEnums['Field']; // Field!
    created_at: NexusGenScalars['Time'] | null; // Time
    enable_video_by_provider: boolean; // Boolean!
    id: number; // Int!
    isActive: boolean; // Boolean!
    last_requested_at: NexusGenScalars['Time'] | null; // Time
    long_description: string | null; // String
    max_attachment_count: number; // Int!
    max_time_minuets: number; // Int!
    short_description: string; // String!
    tags: NexusGenRootTypes['Tag'][]; // [Tag!]!
    title: string; // String!
  }
  ConsultancyById: { // field return type
    data: NexusGenRootTypes['Consultancy']; // Consultancy!
    id: number; // Int!
  }
  ConsultancyConnection: { // field return type
    edges: Array<NexusGenRootTypes['ConsultancyEdge'] | null> | null; // [ConsultancyEdge]
    pageInfo: NexusGenRootTypes['PageInfo'] | null; // PageInfo
  }
  ConsultancyEdge: { // field return type
    cursor: number | null; // Int
    node: NexusGenRootTypes['Consultancy'] | null; // Consultancy
  }
  Event: { // field return type
    id: string; // ID!
  }
  Mutation: { // field return type
    DeleteAvailability: NexusGenRootTypes['Availability'] | null; // Availability
    createAvailability: boolean | null; // Boolean
    createConsultancy: NexusGenRootTypes['Consultancy'] | null; // Consultancy
    createUser: NexusGenRootTypes['User']; // User!
    deleteConsultancy: NexusGenRootTypes['Consultancy'] | null; // Consultancy
    updateAvailability: NexusGenRootTypes['Availability'] | null; // Availability
    updateConsultancy: NexusGenRootTypes['Consultancy'] | null; // Consultancy
  }
  PageInfo: { // field return type
    endCursor: number | null; // Int
    hasNextPage: number | null; // Int
  }
  Query: { // field return type
    consultancies: NexusGenRootTypes['ConsultancyConnection'] | null; // ConsultancyConnection
    getConsultancyById: NexusGenRootTypes['ConsultancyById'] | null; // ConsultancyById
    getMyAvailabilities: Array<NexusGenRootTypes['Availability'] | null> | null; // [Availability]
    getMyConsultancies: Array<NexusGenRootTypes['Consultancy'] | null> | null; // [Consultancy]
    totalConsultancies: NexusGenRootTypes['TotalConsultanciesObject'] | null; // TotalConsultanciesObject
  }
  Request: { // field return type
    age: number | null; // Int
    allow_live_video: boolean | null; // Boolean
    consultancy: NexusGenRootTypes['Consultancy']; // Consultancy!
    consultantUser: NexusGenRootTypes['User']; // User!
    created_at: NexusGenScalars['Time'] | null; // Time
    email: string | null; // String
    expectations: string | null; // String
    expertise: string | null; // String
    gender: NexusGenEnums['Gender'] | null; // Gender
    id: string; // ID!
    isCanceled: boolean; // Boolean!
    isCompleted: boolean; // Boolean!
    name_surname: string | null; // String
    ongoing_support_needed: boolean | null; // Boolean
    prevoiuos_experience: string | null; // String
    profession: string | null; // String
    requestUser: NexusGenRootTypes['User']; // User!
    scheduled_at: NexusGenScalars['Time'] | null; // Time
    time_spent_on_issue: string | null; // String
  }
  Tag: { // field return type
    id: number; // Int!
    name: string; // String!
  }
  TotalConsultanciesObject: { // field return type
    total: number | null; // Int
  }
  User: { // field return type
    accounts: NexusGenRootTypes['Account'][]; // [Account!]!
    email: string | null; // String
    id: string; // ID!
    name: string | null; // String
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenFieldTypeNames {
  Account: { // field return type name
    id: 'ID'
    session_state: 'String'
    user: 'User'
  }
  Availability: { // field return type name
    User: 'User'
    end: 'String'
    id: 'ID'
    is_reserved: 'Boolean'
    start: 'String'
  }
  Consultancy: { // field return type name
    User: 'User'
    allow_age_check: 'Field'
    allow_email_check: 'Field'
    allow_enable_video_by_requester: 'Boolean'
    allow_expectations_check: 'Field'
    allow_expertise_in_problem_field_check: 'Field'
    allow_gender_check: 'Field'
    allow_name_surname: 'Field'
    allow_ongoing_support_check: 'Field'
    allow_previous_consultancy_experience_check: 'Field'
    allow_profession_check: 'Field'
    allow_time_spent_issue_resolution_check: 'Field'
    created_at: 'Time'
    enable_video_by_provider: 'Boolean'
    id: 'Int'
    isActive: 'Boolean'
    last_requested_at: 'Time'
    long_description: 'String'
    max_attachment_count: 'Int'
    max_time_minuets: 'Int'
    short_description: 'String'
    tags: 'Tag'
    title: 'String'
  }
  ConsultancyById: { // field return type name
    data: 'Consultancy'
    id: 'Int'
  }
  ConsultancyConnection: { // field return type name
    edges: 'ConsultancyEdge'
    pageInfo: 'PageInfo'
  }
  ConsultancyEdge: { // field return type name
    cursor: 'Int'
    node: 'Consultancy'
  }
  Event: { // field return type name
    id: 'ID'
  }
  Mutation: { // field return type name
    DeleteAvailability: 'Availability'
    createAvailability: 'Boolean'
    createConsultancy: 'Consultancy'
    createUser: 'User'
    deleteConsultancy: 'Consultancy'
    updateAvailability: 'Availability'
    updateConsultancy: 'Consultancy'
  }
  PageInfo: { // field return type name
    endCursor: 'Int'
    hasNextPage: 'Int'
  }
  Query: { // field return type name
    consultancies: 'ConsultancyConnection'
    getConsultancyById: 'ConsultancyById'
    getMyAvailabilities: 'Availability'
    getMyConsultancies: 'Consultancy'
    totalConsultancies: 'TotalConsultanciesObject'
  }
  Request: { // field return type name
    age: 'Int'
    allow_live_video: 'Boolean'
    consultancy: 'Consultancy'
    consultantUser: 'User'
    created_at: 'Time'
    email: 'String'
    expectations: 'String'
    expertise: 'String'
    gender: 'Gender'
    id: 'ID'
    isCanceled: 'Boolean'
    isCompleted: 'Boolean'
    name_surname: 'String'
    ongoing_support_needed: 'Boolean'
    prevoiuos_experience: 'String'
    profession: 'String'
    requestUser: 'User'
    scheduled_at: 'Time'
    time_spent_on_issue: 'String'
  }
  Tag: { // field return type name
    id: 'Int'
    name: 'String'
  }
  TotalConsultanciesObject: { // field return type name
    total: 'Int'
  }
  User: { // field return type name
    accounts: 'Account'
    email: 'String'
    id: 'ID'
    name: 'String'
    role: 'Role'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    DeleteAvailability: { // args
      id: string; // ID!
    }
    createAvailability: { // args
      data: NexusGenInputs['AvailabilityDataType'][]; // [AvailabilityDataType!]!
    }
    createConsultancy: { // args
      data: NexusGenInputs['ConsultancyDataType']; // ConsultancyDataType!
    }
    createUser: { // args
      email: string; // String!
    }
    deleteConsultancy: { // args
      id: number; // Int!
    }
    updateAvailability: { // args
      data: NexusGenInputs['AvailabilityDataType']; // AvailabilityDataType!
      id: string; // ID!
    }
    updateConsultancy: { // args
      data: NexusGenInputs['ConsultancyDataType']; // ConsultancyDataType!
      id: number; // Int!
    }
  }
  Query: {
    consultancies: { // args
      pagination?: NexusGenInputs['ConsultancyPaginationInput'] | null; // ConsultancyPaginationInput
    }
    getConsultancyById: { // args
      id: number; // Int!
      isActive?: boolean | null; // Boolean
    }
    getMyConsultancies: { // args
      limit: number; // Int!
      offset: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: MainContext;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}